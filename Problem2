# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    #TC: O(n)
    #SC: O(1)
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        ''' take 2 nodes travese fast node till n and after reaching n traverse slow
        then perforn delete           '''
        dummy=ListNode(-1,head)
        slow=dummy
        fast=dummy
        c=0
        while c<=n:
            fast=fast.next
            c+=1
        
        while fast:
            fast=fast.next
            slow=slow.next
        
        slow.next=slow.next.next
        
        return dummy.next
        

        #has 'NoneType' object has no attribute 'next'= means reached the  null and no next
